1. Преобразуйте следующие десятичные значения в двоичную форму:

	а. 3
	б. 13
	в. 59
	г. 119

2. Преобразуйте следующие двоичные значения в десятичную, восьмеричную и шестнадцатеричную форму:

	а. 00010101
	б. 01010101
	в. 01001100
	г. 10011101

3. Вычислите следующие выражения; предположите, что каждое значение имеет 8 битов:

	а. ~3
	б. 3 & 6
	в. 3 | 6
	г. 1 | 6
	д. 3 ^ 6
	е. 7 >> 1
	ж. 7 << 9

4. Вычислите следующие выражения; предположите, что каждое значение имеет 8 битов:

	а. -О
	б. !О
	в. 2 & 4
	г. 2 && 4
	д. 2 | 4
	е. 2 || 4
	ж. 5 << 3

5. Поскольку в ASCII-коде используются только последние 7 битов, иногда желательно маскировать остальные биты. Как будет выглядеть подходящая маска в двоичной форме? В десятичной? В восьмеричной? В шестнадцатеричной?

6. В листинге 15.2 следующий код

	while (bits-- > 0)
	{
		mask 1= bitval;
		bitval <<= 1;
	}

можно заменить таким фрагментом:
	
	while (bits-- > 0)
	{
		mask += bi tval;
		bitval *= 2;
	}

и программа по-прежнему будет работать. Означает ли это, что действие *= 2 эквивадентно <<= 1? А как насчет |= и +=?

7. а. Компьютер linkerbell содержит в специальном байте информацию, касающуюся оборудования. Этот байт может быть прочитан программой, и он содержит следующую информацию:

	Биты		Описание
	0-1		Количество дисководов 1.44 Мбайт
	2		Не используется
	3-4		Количество приводов чтения компакт-дисков
	5		Не используется
	6-7		Количество жестких дисков

		Подобно IВМ РС, компьютер Tinkerbell заполняет битовые поля структуры справа налево. Создайте шаблон битовых нолей, подходящий для хранения информации.

	б. Компьютер Klinkerbell, ближайший клон Tinkerbell, заполняет битовые ноля структур слева направо. Создайте соответствующий шаблон битовых нолей для системы Klinkerbell.



1. Какая ошибка допущена в представленном объявлении символьной строки?

	int main(void)
	{
	char name[] = {'Л ', 'у ', 'н ', 'а '};
	}

2. Что выведет следующая программа?

	#include <stdio.h>
	int main(void)
	{
		char note[] = "Увидимся завтра в кафе.";
		char *ptr;
		ptr = note;
		puts(ptr);
		puts(++ptr);
		note[7] = ’\0';
		puts(note);
		puts(++ptr);
		return 0;
	}

3. Что выведет следующая программа?

	#include <stdio.h>
	#include <string.h>
	int main(void)
	{
		char food[] = "Вкусно";
		char *ptr;
		ptr = food + strlen(food);
		while (--ptr >= food)
			puts (ptr);
		return О;
	}

4. Что выведет следующая программа?

	#include <stdio.h>
	#include <string.h>
	int main(void)
	{
		char goldwyn[40] = "огу я смог ";
		char samuel[40] = "За всю дор";
		const char * quote = "осилить лишь часть.";
		strcat(goldwyn, quote);
		strcat(samuel, goldwyn);
		puts(samuel);
		return 0;
	}

5. Приведенные ниже вопросы позволят попрактиковаться со строками, циклами, указателями и их инкрементированием. Предположим, что имеется такое определение функции:

	#include <stdio.h>
	char *pr (char *str)
	{
		char *рc;
		рс = str;
		while (*рc)
			putchar(*pc++);
		do {
			putchar(*--pc);
		} while (рс - str);
		return (рc);
	}

Взгляните на следующий вызов функции:

		х = pr("Хо Хо Хо!");

	а. Что он выводит?

	б. Какой тип должна иметь переменная х?

	в. Какое значение получает переменная х?

	г. Что означает выражение *--рс, и чем оно отличается от --*рс?

	д. Что будет выведено, если *--рc заменить выражением *рс--?

	е. Для чего предназначены два выражения проверки в операторах while?

	ж. Что произойдет, если функции pr() передать в качестве аргумента пустую строку?

	з. Что придется сделать в вызывающей функции, чтобы pr() можно было использовать так, как показано выше?

6. Предположим, что имеется следующее объявление:

	char sign = '$'; 

Сколько байтов памяти занимает переменная sign? Значение '$'? Значение "$"?

7. Что выведет следующая программа?

	#include <stdio.h>
	#include <string.h>
	#define M1 "How are уа, sweetie?"
	char М2[40] = "Beat the clock.";
	char * МЗ = "chat";
	int main(void)
	{
		char words[80];
		printf(M1);
		puts(М1);
		puts(M2);
		puts(M2 + 1);
		strcpy(words,M2);
		strcat(words,"Win а toy.");
		puts(words);
		words[4] = "\0';
		puts(words);
		while (*МЗ)
			puts(M3++);
		puts(--МЗ);
		puts(--МЗ);
		МЗ = M1;
		puts(M3);
		return 0;
	}

8. Что выведет следующая программа?

	#include <stdio.h>
	int main(void)
	{
		char strl[] = "gawsie";
		char str2 [] = "bletonism";
		char *ps;
		int i = О;
		for (ps = strl; *ps != '\О'; ps++) {
			if ( *ps == 'а' 11 *ps == 'е')
				putchar(*ps);
			else
				(*ps)--;
			putchar (*ps);
		}
		putchar('\n');
		while (str2 [i] != '\О') {
			printf("%c", i % 3 ? str2[i] : '*' );
			++i;
		}
		return 0;
	}

9. Функцию s_gets (), определенную в этой главе, можно переписать в форме с использованием указателей, а не массивов, чтобы и сключить из нее переменную i. Сделайте это.

10. Функция strlen() принимает указатель на строку в качестве аргумента и возвращает длину строки. Напишите свою версию этой функции.

11. Функцию s_gets(), определенную в этой главе, можно переписать с использованием функции strchr() вместо цикла while для обнаружения символа новой строки. Сделайте это.

12. Разработайте функцию, которая принимает указатель на строку в качестве аргумента и возвращает указатель на первый символ пробела, расположенный в указанной позиции внутри строки или после нее. Функция должна возвращать нулевой указатель, если пробелы не найдены.

13. Перепишите программу из листинга 11.21, используя функции из ctype.h для того, чтобы программа распознавала правильный ответ независимо от применения пользователем прописных или строчных букв.



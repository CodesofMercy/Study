1. Предположим, что все переменные имеют тип int. Найдите значение для каждой из следующих переменных:
а. х = (2 + 3) * 6;
б. х = (12 + 6)/2*3;
в. у = х = (2 + 3)/4;
г. у = 3 + 2* (х = 7/2);

2. Предположим, что все переменные имеют тип int. Найдите значение для каждой из следующих переменных:

	а. х = (int) 3.8 + 3.3;
	б. х = (2 + 3) * 10.5;
	в. х = 3 / 5 * 22.0;
	г. х = 22.0 * 3/5;

3. Вычислите каждое из следующих выражений:

	а. 30.0 / 4.0* 5.0;
	б. 30.0 / (4.0 * 5.0) ;
	в. 30 / 4 * 5;
	г. 30 * 5 / 4;
	д. 30 / 4.0 * 5;
	е. 30 / 4 * 5.0;

4. Есть подозрение, что в приведенной ниже программе присутствуют ошибки. Сможете ли вы их обнаружить?

	int main(void)
	{
		int i = 1,
		float n;
		printf("Будьте внимательны! Далее идет последовательность дробей!\n");
		while (i ■<30)
			n =l/i;
			printf(" %f", n);
		printf("Ha этом все!\n");
		return;
	}

5. Ниже приведен альтернативный вариант программы из листинга 5.9. Выглядит так, будто преследовалась цель упростить код путем замены двух операторов scanf() из листинга 5.9 единственным оператором scanf(). Почему этот вариант программы хуже исходного?

	#include <stdio.h>
	#define S_TO_M 60
	int main(void)
	{
		int sec, min, left;
		printf("Эта программа переводит секунды в минуты и ");
		printf("секунды.\n");
		printf("Введите количество секунд.\n");
		printf("Для завершения программы введите 0.\n");
		while (sec > 0) {
			scanf("%d", &sec);
			min = sec/S_TO_M;
			left = sec % S_TO_M;
			printf ("%d секунд - это %d минут %d секунд. \n", sec, min, left)
			printf("Cлeдyющee значение?\п");
			}
		printf("До свидания!\n");
		return 0;
	}

б. Что выведет эта программа?

	#include <stdio.h>
	#define FORMAT "%s! С is cool!\n"
	int main (void)
	{
		int num = 10;
		printf (FORMAT, FORMAT);
		printf("%d\n", ++num);
		printf("%d\n", num++);
		printf("%d\n", num--);
		printf("%d\n", num);
		return 0;
	}

7. Что выведет следующая программа?

	#include <stdio.h>
	int main(void)
	{
		char cl, с2;
		int diff;
		float num;
		cl = 'S';
		с2 = 'О';
		diff = cl - с2;
		num = diff;
		printf ("%c%c%c:%d %3.2f\n", cl, с2, cl, diff, num);
		return 0;
	}

8. Что выведет эта программа?

	#include <stdio.h>
	#define TEN 10
	int main(void)
	{
		int n = 0;
		while (n++ < TEN)
			printf("%5d", n);
		printf("\n");
		return 0;
	}

9. Модифицируйте последнюю программу так, чтобы вместо чисел она выводила буквы алфавита от а до g.

10. Если бы следующие фрагменты кода были частью завершенной программы, тогда что они выводили бы?
	
	а. int х = О;
	while (++х < 3)
		printf("%4d", х);

	б. int х = 100;
	while (х++ < 103)
	printf("%4d\n", x);
		printf("%4d\n", x);

	в. char ch = 's';
	while (ch < 'w')
	{
		printf("%c", ch);
		ch++;
	}
	printf("%c\n",ch);

11. Что выведет следующая программа?

	#define MESG "COMPUTER BYTES DOG"
	#include <stdio.h>
	int main(void)
	{
		int n = 0;
		while(n < 5)
			printf("%s\n", MESG);
			n++;
		printf("Ha этом все.\n");
		return 0;
	}

12. Напишите операторы, которые выполняют перечисленные ниже действия (или, другими словами, имеют следующие побочные эффекты).
	а. Увеличивает значение переменной х на 1О.
	б. Увеличивает значение переменной х на 1.
	в. Присваивает переменной с удвоенную сумму а и Ь.
	г. Присваивает переменной с сумму а и удвоенного значения Ь.

13. Напишите операторы, которые выполняют перечисленные ниже действия.
	а. Уменьшает значение переменной х на 1.
	б. Присваивает m остаток от деления n на к.
	в. Делит q на Ь минус а и присваивает результат р.
	г. Присваивает переменной х результат деления суммы а и Ь на произведение с и d.


